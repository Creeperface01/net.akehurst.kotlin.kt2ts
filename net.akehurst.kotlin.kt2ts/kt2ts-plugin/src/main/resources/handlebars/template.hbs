{{#each import~}}
import * as {{moduleVar}} from '{{name}}';
{{/each}}
{{#each namespace~}}
export declare namespace {{name}} {
      {{#each datatype~}}
        {{#if isEnum~}}
            enum {{name}} {
                {{#each property~}}
                    {{name}}{{#unless @last}},{{/unless}}
                {{~/each}}
            }
        {{else~}}
            {{#if isAbstract}}abstract{{/if}} {{#if isInterface}}interface{{else}}class{{/if}} {{name}}{{#if extends}} extends {{#each extends~}}
              {{#if isSamePackage}}{{name}}{{else if isSameModule}}{{qualifiedName}}{{else}}{{fullyQualifiedName}}{{/if}}
            {{~/each}} {{/if}} {{#if implements}} implements {{#each implements~}}
              {{#if isSamePackage}}{{name}}{{else if isSameModule}}{{qualifiedName}}{{else}}{{fullyQualifiedName}}{{/if}}{{#unless @last}},{{/unless}}
            {{~/each}} {{/if}} {
              {{#each property~}}
                {{name}}: {{#if type.isGeneric~}}
                               {{#if type.isSamePackage~}}
                                 {{type.name}}
                               {{~else if type.isSameModule~}}
                                 {{type.qualifiedName}}
                               {{~else~}}
                                 {{type.fullyQualifiedName}}
                               {{~/if~}}
                               <{{#each type.elementType~}}
                                    {{#if isGeneric~}}
                                       {{#if isSamePackage~}}
                                         {{name}}
                                       {{~else if isSameModule~}}
                                         {{qualifiedName}}
                                       {{~else~}}
                                         {{fullyQualifiedName}}
                                       {{~/if~}}
                                       <{{#each elementType~}}
                                                       {{#if isSamePackage~}}
                                                         {{name}}
                                                       {{~else if isSameModule~}}
                                                         {{qualifiedName}}
                                                       {{~else~}}
                                                         {{fullyQualifiedName}}
                                                       {{~/if~}}{{#unless @last}},{{/unless}}
                                                    {{~/each}}>
                                    {{~else if isEnum~}}
                                        any /* enum {{name}} */
                                    {{~else~}}
                                       {{#if isSamePackage~}}
                                         {{name}}
                                       {{~else if isSameModule~}}
                                         {{qualifiedName}}
                                       {{~else~}}
                                         {{fullyQualifiedName}}
                                       {{~/if~}}
                                    {{~/if~}}{{#unless @last}},{{/unless}}
                               {{~/each}}>
                          {{~else if type.isEnum~}}
                             any /* enum {{name}} */
                          {{~else~}}
                               {{#if type.isSamePackage~}}
                                 {{type.name}}
                               {{~else if type.isSameModule~}}
                                 {{type.qualifiedName}}
                               {{~else~}}
                                 {{type.fullyQualifiedName}}
                               {{~/if~}}
                          {{~/if~}};
              {{/each}}
            }
        {{/if}}
      {{/each}}
}
{{/each}}